{"version":3,"sources":["singlis/streaming.cljs"],"mappings":";AAKA,AAAA,AAAKA;AACL,AAAA,AAAKC;AAEL,AAAA,AAAMC;AAAN,AACE,AAAmBC;;AAErB,AAAA,AAAMC,AAAcC;AAApB,AACE,AAAcC,AAAgBD;;AAEhC,AAAA,AAAME;AAAN,AACE,AAAA,AAAiBC;;AAEnB,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAK,AAACH;AAAN,AAAA,AAAAG;AAAA,AAAAA,AACK,AAAcP;AADnB,AAAA,AAAAO;AAEK,AAAmBP;;AAFxBO;;;AAAAA;;;AAIF,AAAA,AAAMC;AAAN,AACE,AAASR;;AAEX,AAAA,AAAMS;AAAN,AACE,AAAAC,AAAmCV;;AAErC,AAAA,AAAMW;AAAN,AACE,AAAY,AAACF;;AAEf,AAAA,AAAMG,AAASC;AAAf,AACE,AAAAC,AAAqBjB,AAAgBkB,AAAWF;;AAElD,AAAA,AAAMG,AAAOH;AAAb,AACE,AAAAC,AAAqBhB,AAAmBmB,AAAUJ;;AAEpD,AAAA,AAAMK;AAAN,AACE,AAAI,AAACZ;AACC,AAACK,AACD,AAACK,AACD,AAAY,AAACjB,AACb,AAAOE,AACP,AAAA,AAAAkB;AAAA,AAAQ,AAAA,AAAA,AAAAA,AAACC;;;AALf;;;AASF,AAAA,AAAMC,AAAqBC,AAAMC;AAAjC,AACM,AAAUD,AAAMzB,AAAgB0B,AAChC,AAAA,AAAAC;AAAA,AAAQ,AAAAA;;;AAEd,AAAA,AAAMC,AAAqBC,AAAQC,AAAWC,AAAUC,AAAUN;AAAlE,AACM,AAAeG,AAAQG,AAAUN,AAAQzB,AAAmB6B,AAAWC,AACvE,AAAA,AAAAE;AAAA,AAAS,AAAAA;;;AAEf,AAAA,AAAMC;AAAN,AACE,AAAQC,AAAY,AAAAC,AAAW,AAAW,AAAA;;AAE5C,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA4BM;AAA5B,AAAAF,AAAAJ,AAAA,AAAkCO;AAAlC,AAAAH,AAAAJ,AAAA,AAA2CN;AAA3C,AACE,AAAMP,AAAM,AAACN,AAAM,AAACL;AACde,AAAQ,AAACd,AAAQ,AAACD;AAClBgC,AAAI,AAACZ;AACLa,AAAS,AAAA,AAAQ,AAAA,AAAKH;AAH5B,AAIMI;AACAtB,AAAQ,AAAK,AAAGmB,AAAS,AAACI,AAAIJ,AAASE;AAL7C,AAMM,AAACvB,AAAcC,AAAMC,AACrB,AAAA,AACA,AAKA,AACA,AACA;AARA,AAAQ,AAAA,AAAA,AAAA,AAACH;AACT;AAAA,AAAQ,AAACK,AACAC,AACA,AAAGiB,AAAIE,AACP,AAAA,AAAGF,AAAIC,AAASC,AAChBhB,AAAUN;AACnB;AAAA,AAAQ,AAAA,AAAA,AAAA,AAACH;AACT;AAAA,AAAQ,AAAA,AAAA,AAACA;AACT;AAAA,AAAS,AAAA,AAAA,AAAA,AAACA","names":["singlis.streaming/sablier-address","singlis.streaming/testnetDAI-address","singlis.streaming/current-address","js/window.ethereum","singlis.streaming/format-units","number","js/ethers.utils","singlis.streaming/metamask-installed?","js/window","singlis.streaming/metamask-connected?","and__4115__auto__","singlis.streaming/enable-metamask","singlis.streaming/provider","js/ethers.providers.Web3Provider","singlis.streaming/signer","singlis.streaming/sablier","signer","js/ethers.Contract","singlis.config/sablierABI","singlis.streaming/token","singlis.config/ierc20ABI","singlis.streaming/check-balance","p1__43108#","re-frame.core/dispatch","singlis.streaming/approve-token","token","deposit","p1__43109#","singlis.streaming/create-stream","sablier","start-time","stop-time","recipient","p1__43110#","singlis.streaming/now","js/Math","js/Date","p__43111","map__43112","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","singlis.streaming/process-form","hours","quantity","now","duration","delay","cljs.core/mod"],"sourcesContent":["(ns singlis.streaming\n  (:require\n   [singlis.config :refer [sablierABI ierc20ABI]]\n   [re-frame.core :as re-frame]))\n\n(def sablier-address \"0xc04Ad234E01327b24a831e3718DBFcbE245904CC\")\n(def testnetDAI-address \"0xc3dbf84Abb494ce5199D5d4D815b10EC29529ff8\")\n\n(defn current-address []\n  (.-selectedAddress js/window.ethereum))\n\n(defn format-units [number]\n  (.formatUnits js/ethers.utils number))\n\n(defn metamask-installed? []\n  (.hasOwnProperty js/window \"ethereum\"))\n\n(defn metamask-connected? []\n  (and (metamask-installed?)\n       (.isConnected js/window.ethereum)\n       (.-selectedAddress js/window.ethereum)))\n\n(defn enable-metamask []\n  (.enable js/window.ethereum))\n\n(defn provider []\n  (js/ethers.providers.Web3Provider. js/window.ethereum))\n\n(defn signer []\n  (.getSigner (provider)))\n\n(defn sablier [signer]\n  (js/ethers.Contract. sablier-address sablierABI signer))\n\n(defn token [signer]\n  (js/ethers.Contract. testnetDAI-address ierc20ABI signer ))\n\n(defn check-balance []\n  (if (metamask-connected?)\n    (-> (signer)\n        (token)\n        (.balanceOf (current-address))\n        (.then format-units)\n        (.then #(re-frame/dispatch [:update-balance %])))\n    ))\n\n\n(defn approve-token [^js/e token deposit]\n  (-> (.approve token sablier-address deposit)\n      (.then #(.wait %))))\n\n(defn create-stream [^js/e sablier start-time stop-time recipient deposit]\n  (-> (.createStream sablier recipient deposit testnetDAI-address start-time stop-time)\n      (.then  #(.wait %))))\n\n(defn now []\n  (.round js/Math (-> (js/Date.) (.getTime) (/ 1000))))\n\n(defn process-form [{:keys [hours quantity recipient]}]\n  (let [token (token (signer))\n        sablier (sablier (signer))\n        now (now)\n        duration (* 3600 (int hours))\n        delay 60\n        deposit (str (- quantity (mod quantity duration)))]\n    (-> (approve-token token deposit)\n        (.then #(re-frame/dispatch [:update-status :processing]))\n        (.then #(create-stream\n                 sablier\n                 (+ now delay)\n                 (+ now duration delay)\n                 recipient deposit))\n        (.then #(re-frame/dispatch [:update-status :finished]))\n        (.then #(re-frame/dispatch [:check-balance]))\n        (.catch #(re-frame/dispatch [:update-status :failed])))))\n"]}